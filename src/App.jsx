import React, { useState } from 'react';
import './App.css'

/**
 * @typedef {Object} Translation
 * @property {string} heroTitle
 * @property {string} heroSubtitle
 * @property {string} join
 * @property {string} surrender
 * @property {string} featuresTitle
 * @property {string} brain
 * @property {string} brainDesc
 * @property {string} rays
 * @property {string} raysDesc
 * @property {string} mind
 * @property {string} mindDesc
 * @property {string} testZone
 * @property {string} dropdownShow
 * @property {string} dropdownHide
 * @property {string} martian
 * @property {string} venusian
 * @property {string} earthling
 * @property {string} textShow
 * @property {string} textHide
 * @property {string} line1
 * @property {string} line2
 * @property {string} line3
 * @property {string} click
 * @property {string} times
 * @property {string} martianRed
 * @property {string} martianGreen
 * @property {string} footer
 * @property {string} lang
 */

/** @type {{ EN: Translation, RU: Translation }} */
const translations = {
  EN: {
    heroTitle: 'MARS ATTACKS!',
    heroSubtitle: 'THE INVASION HAS BEGUN ‚Ä¢ RESISTANCE IS FUTILE ‚Ä¢ WELCOME YOUR NEW OVERLORDS',
    join: 'JOIN THE INVASION',
    surrender: 'SURRENDER NOW',
    featuresTitle: 'ALIEN TECHNOLOGY',
    brain: 'BRAIN EXTRACTION',
    brainDesc: 'Advanced Martian technology for efficient human brain harvesting and analysis.',
    rays: 'DEATH RAYS',
    raysDesc: 'State-of-the-art disintegration weapons that reduce humans to colorful skeletons.',
    mind: 'MIND CONTROL',
    mindDesc: 'Hypnotic Martian powers to bend human will and establish our galactic empire.',
    testZone: 'INTERACTIVE TEST ZONE',
    dropdownShow: 'Show Drop-down',
    dropdownHide: 'Hide Drop-down',
    martian: 'Martian',
    venusian: 'Venusian',
    earthling: 'Earthling',
    textShow: 'Show Text Lines',
    textHide: 'Hide Text Lines',
    line1: '‚Ä¢ The Martians are coming!',
    line2: '‚Ä¢ Hide your cows!',
    line3: '‚Ä¢ Prepare the death rays!',
    click: 'Clicked',
    times: 'times',
    martianRed: 'Martian Red',
    martianGreen: 'Martian Green',
    footer: 'ACK ACK ACK! ‚Ä¢ MARS EMPIRE ¬© 2024 ‚Ä¢ ALL HUMANS RESERVED FOR EXPERIMENTATION',
    lang: 'RU'
  },
  RU: {
    heroTitle: '–ù–ê–ü–ê–î–ï–ù–ò–ï –ú–ê–†–°–ê!',
    heroSubtitle: '–ù–ê–ß–ê–õ–û–°–¨ –í–¢–û–†–ñ–ï–ù–ò–ï ‚Ä¢ –°–û–ü–†–û–¢–ò–í–õ–ï–ù–ò–ï –ë–ï–°–ü–û–õ–ï–ó–ù–û ‚Ä¢ –ü–†–ò–í–ï–¢–°–¢–í–£–ô–¢–ï –ù–û–í–´–• –ü–û–í–ï–õ–ò–¢–ï–õ–ï–ô',
    join: '–ü–†–ò–°–û–ï–î–ò–ù–ò–¢–¨–°–Ø –ö –í–¢–û–†–ñ–ï–ù–ò–Æ',
    surrender: '–°–î–ê–¢–¨–°–Ø –°–ï–ô–ß–ê–°',
    featuresTitle: '–ò–ù–ù–û–í–ê–¶–ò–ò –ò–ù–û–ü–õ–ê–ù–ï–¢–Ø–ù',
    brain: '–ò–ó–í–õ–ï–ß–ï–ù–ò–ï –ú–û–ó–ì–ê',
    brainDesc: '–ü–µ—Ä–µ–¥–æ–≤—ã–µ –º–∞—Ä—Å–∏–∞–Ω—Å–∫–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–±–æ—Ä–∞ –∏ –∞–Ω–∞–ª–∏–∑–∞ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏—Ö –º–æ–∑–≥–æ–≤.',
    rays: '–õ–£–ß–ò –°–ú–ï–†–¢–ò',
    raysDesc: '–°–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –æ—Ä—É–∂–∏–µ –¥–µ–∑–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏, –ø—Ä–µ–≤—Ä–∞—â–∞—é—â–µ–µ –ª—é–¥–µ–π –≤ —Ü–≤–µ—Ç–Ω—ã–µ —Å–∫–µ–ª–µ—Ç—ã.',
    mind: '–ö–û–ù–¢–†–û–õ–¨ –†–ê–ó–£–ú–ê',
    mindDesc: '–ì–∏–ø–Ω–æ—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏–ª—ã –º–∞—Ä—Å–∏–∞–Ω –¥–ª—è –ø–æ–¥—á–∏–Ω–µ–Ω–∏—è —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–π –≤–æ–ª–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏—è –≥–∞–ª–∞–∫—Ç–∏—á–µ—Å–∫–æ–π –∏–º–ø–µ—Ä–∏–∏.',
    testZone: '–ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–ê–Ø –ó–û–ù–ê –¢–ï–°–¢–ê',
    dropdownShow: '–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫',
    dropdownHide: '–°–∫—Ä—ã—Ç—å –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫',
    martian: '–ú–∞—Ä—Å–∏–∞–Ω–∏–Ω',
    venusian: '–í–µ–Ω–µ—Ä–∏–∞–Ω–µ—Ü',
    earthling: '–ó–µ–º–ª—è–Ω–∏–Ω',
    textShow: '–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–æ–∫–∏ —Ç–µ–∫—Å—Ç–∞',
    textHide: '–°–∫—Ä—ã—Ç—å —Å—Ç—Ä–æ–∫–∏ —Ç–µ–∫—Å—Ç–∞',
    line1: '‚Ä¢ –ú–∞—Ä—Å–∏–∞–Ω–µ –∏–¥—É—Ç!',
    line2: '‚Ä¢ –ü—Ä—è—á—å—Ç–µ –∫–æ—Ä–æ–≤!',
    line3: '‚Ä¢ –ì–æ—Ç–æ–≤—å—Ç–µ –ª—É—á–∏ —Å–º–µ—Ä—Ç–∏!',
    click: '–ö–ª–∏–∫–æ–≤',
    times: '',
    martianRed: '–ú–∞—Ä—Å–∏–∞–Ω—Å–∫–∏–π –ö—Ä–∞—Å–Ω—ã–π',
    martianGreen: '–ú–∞—Ä—Å–∏–∞–Ω—Å–∫–∏–π –ó–µ–ª—ë–Ω—ã–π',
    footer: '–ê–ö –ê–ö –ê–ö! ‚Ä¢ –ò–ú–ü–ï–†–ò–Ø –ú–ê–†–°–ê ¬© 2024 ‚Ä¢ –í–°–ï –õ–Æ–î–ò –ó–ê–†–ï–ó–ï–†–í–ò–†–û–í–ê–ù–´ –î–õ–Ø –≠–ö–°–ü–ï–†–ò–ú–ï–ù–¢–û–í',
    lang: 'EN'
  }
};

function App() {
  const [lang, setLang] = useState('EN');
  /** @type {Translation} */
  const t = translations[lang];
  return (
    <div className="mars-landing">
      <button className="lang-switch-btn" onClick={() => setLang(l => l === 'EN' ? 'RU' : 'EN')}>
        {t.lang}
      </button>
      {/* Hero Section */}
      <section className="hero">
        <div className="alien-overlay"></div>
        <div className="hero-content">
          <div className="ufo">üõ∏</div>
          <h1 className="hero-title">{t.heroTitle}</h1>
          <p className="hero-subtitle">
            {t.heroSubtitle}
          </p>
          <div className="hero-buttons">
            <button className="btn btn-primary">{t.join}</button>
            <button className="btn btn-secondary">{t.surrender}</button>
          </div>
        </div>
        <div className="mars-bg"></div>
      </section>

      {/* Features Section */}
      <section className="features">
        <div className="container">
          <h2 className="section-title">{t.featuresTitle}</h2>
          <div className="features-grid">
            <div className="feature-card">
              <div className="feature-icon">üëΩ</div>
              <h3>{t.brain}</h3>
              <p>{t.brainDesc}</p>
            </div>
            <div className="feature-card">
              <div className="feature-icon">üõ∏</div>
              <h3>{t.rays}</h3>
              <p>{t.raysDesc}</p>
            </div>
            <div className="feature-card">
              <div className="feature-icon">üî¥</div>
              <h3>{t.mind}</h3>
              <p>{t.mindDesc}</p>
            </div>
          </div>
        </div>
      </section>

      {/* Interactive Test Section */}
      <section className="features">
        <div className="container">
          <h2 className="section-title">{t.testZone}</h2>
          <div style={{ display: 'flex', flexDirection: 'column', gap: '1.5rem', alignItems: 'center', marginTop: '2rem' }}>
            {/* Dropdown simulation */}
            <DropdownSimulator t={t} />
            {/* Text lines toggle */}
            <TextLinesToggle t={t} />
            {/* Click counter */}
            <ClickCounter t={t} />
            {/* Color toggle button */}
            <ColorToggleButton t={t} />
          </div>
        </div>
      </section>

      {/* Footer */}
      <footer className="footer">
        <div className="container">
          <p>{t.footer}</p>
        </div>
      </footer>
    </div>
  )
}

export default App

// DropdownSimulator: shows/hides a dropdown list
/** @param {{ t: Translation }} props */
function DropdownSimulator({ t }) {
  const [show, setShow] = useState(false);
  return (
    <div>
      <button className="btn btn-primary" onClick={() => setShow(s => !s)}>
        {show ? t.dropdownHide : t.dropdownShow}
      </button>
      {show && (
        <select style={{ marginLeft: '1rem', padding: '0.5rem', fontSize: '1rem' }}>
          <option>{t.martian}</option>
          <option>{t.venusian}</option>
          <option>{t.earthling}</option>
        </select>
      )}
    </div>
  );
}

// TextLinesToggle: shows/hides several text lines
/** @param {{ t: Translation }} props */
function TextLinesToggle({ t }) {
  const [show, setShow] = useState(false);
  return (
    <div>
      <button className="btn btn-secondary" onClick={() => setShow(s => !s)}>
        {show ? t.textHide : t.textShow}
      </button>
      {show && (
        <div style={{ marginTop: '0.5rem', color: '#ffff00', textAlign: 'left' }}>
          <div>{t.line1}</div>
          <div>{t.line2}</div>
          <div>{t.line3}</div>
        </div>
      )}
    </div>
  );
}

// ClickCounter: button that counts clicks
/** @param {{ t: Translation }} props */
function ClickCounter({ t }) {
  const [count, setCount] = useState(0);
  return (
    <button className="btn btn-primary" onClick={() => setCount(c => c + 1)}>
      {t.click} {count} {t.times}
    </button>
  );
}

// ColorToggleButton: toggles color on click
/** @param {{ t: Translation }} props */
function ColorToggleButton({ t }) {
  const [on, setOn] = useState(false);
  return (
    <button
      className={on ? 'btn btn-secondary' : 'btn btn-primary'}
      onClick={() => setOn(o => !o)}
    >
      {on ? t.martianGreen : t.martianRed}
    </button>
  );
}
